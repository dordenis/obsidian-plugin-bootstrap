import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";

const manifest = () => ({
	name: 'manifest',
	setup(build) {
		build.onEnd(async () => {
			try {
				fs.renameSync('manifest.json', 'build/manifest.json');
			} catch (e) {
				console.error('Failed to rename file:', e);
			}
		});
	},
});


const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
const dir = prod ?  "./build/" : process.env.OBSIDIAN_CONFIG_DIR;

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts", "src/styles.css"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir: dir,
	loader: { ".png": "base64" },
	plugins: [
		manifest()
	],

});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
