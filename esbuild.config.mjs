import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { existsSync } from "fs";
import {
  copyFile,
  mkdir,
  readFile
} from "fs/promises";

const banner =
  `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "main.js",
  plugins: [
    {
      name: "copy-to-obsidian-plugins-folder",
      setup: (build) => {
        build.onEnd(async () => {
          if (prod || !process.env.OBSIDIAN_CONFIG_DIR) {
            return;
          }

          const packageJson = JSON.parse(await readFile("./package.json"));
          const pluginName = packageJson.name;
          const pluginDir = `${process.env.OBSIDIAN_CONFIG_DIR}/plugins/${pluginName}/`;
          if (!existsSync(pluginDir)) {
            await mkdir(pluginDir);
          }

          const fileNames = [".hotreload", "styles.css", "manifest.json", "main.js"];

          for (const fileName of fileNames) {
            const localFile = `./${fileName}`;
            const targetFile = `${pluginDir}/${fileName}`;

            if (existsSync(localFile)) {
              await copyFile(localFile, targetFile);
            }
          }
        });
      }
    }
  ]
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
